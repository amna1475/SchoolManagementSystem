import java.io.FileWriter;
import java.io.IOException;
import java.util.List;

public class AdministrativeStaff extends Person implements Reportable {
    // Attributes
    private String staffID;
    private String role;
    private String department;

    // Constructor with error handling for invalid inputs
    public AdministrativeStaff(String name, int age, String staffID, String role, String department, Date dateOfBirth, String email) {
        super(name, age, dateOfBirth, email); // Pass dateOfBirth and email to the parent constructor (Person)
        
        if (staffID == null || staffID.trim().isEmpty()) {
            throw new IllegalArgumentException("Staff ID cannot be null or empty.");
        }
        if (role == null || role.trim().isEmpty()) {
            throw new IllegalArgumentException("Role cannot be null or empty.");
        }
        if (department == null || department.trim().isEmpty()) {
            throw new IllegalArgumentException("Department cannot be null or empty.");
        }

        this.staffID = staffID;
        this.role = role;
        this.department = department;
    }

    // Getter methods
    public String getStaffID() {
        return staffID;
    }

    public String getRole() {
        return role;
    }

    public String getDepartment() {
        return department;
    }

    // Setter methods with error handling
    public void setStaffID(String staffID) {
        if (staffID == null || staffID.trim().isEmpty()) {
            throw new IllegalArgumentException("Staff ID cannot be null or empty.");
        }
        this.staffID = staffID;
    }

    public void setRole(String role) {
        if (role == null || role.trim().isEmpty()) {
            throw new IllegalArgumentException("Role cannot be null or empty.");
        }
        this.role = role;
    }

    public void setDepartment(String department) {
        if (department == null || department.trim().isEmpty()) {
            throw new IllegalArgumentException("Department cannot be null or empty.");
        }
        this.department = department;
    }

    // Method to generate report of students and teachers with error handling
    public String generateReport(List<Person> people) {
        if (people == null) {
            throw new IllegalArgumentException("People list cannot be null.");
        }

        String report = "Report generated by: " + getName() + "\n";
        
        for (Person person : people) {
            if (person instanceof Student) {
                Student student = (Student) person;
                report += "\nStudent: " + student.getName() 
                          + " ID: " + student.getStudentID()
                          + " Age: " + student.getAge()
                          + " CGPA: " + student.getCgpa();
            } else if (person instanceof Teacher) {
                Teacher teacher = (Teacher) person;
                report += "\nTeacher: " + teacher.getName() 
                          + " ID: " + teacher.getTeacherID()
                          + " Specialization: " + teacher.getSpecialization();
            } 
        }
        return report;
    }

    // Implement the generateReport method from Reportable interface with error handling
    @Override
    public void generateReport() {
        if (getName() == null || getName().trim().isEmpty()) {
            System.out.println("Error: Staff name cannot be empty.");
            return;
        }
        System.out.println("Administrative Staff Report");
        System.out.println("Staff ID: " + staffID);
        System.out.println("Name: " + getName());
        System.out.println("Age: " + getAge());
        System.out.println("Date of Birth: " + getDateOfBirth().getDay() + "-" + getDateOfBirth().getMonth() + "-" + getDateOfBirth().getYear());
        System.out.println("Email: " + getEmail());
        System.out.println("Role: " + role);
        System.out.println("Department: " + department);
    }

    // Implement the exportToFile method from Reportable interface with error handling for file operations
    @Override
    public void exportToFile() {
        if (getName() == null || getName().trim().isEmpty()) {
            System.out.println("Error: Staff name cannot be empty.");
            return;
        }

        try (FileWriter writer = new FileWriter("administrative_staff_report.txt")) {
            writer.write("Administrative Staff Report\n");
            writer.write("Staff ID: " + staffID + "\n");
            writer.write("Name: " + getName() + "\n");
            writer.write("Age: " + getAge() + "\n");
            writer.write("Date of Birth: " + getDateOfBirth().getDay() + "-" + getDateOfBirth().getMonth() + "-" + getDateOfBirth().getYear() + "\n");
            writer.write("Email: " + getEmail() + "\n");
            writer.write("Role: " + role + "\n");
            writer.write("Department: " + department + "\n");

            System.out.println("Administrative staff report exported to administrative_staff_report.txt.");
        } catch (IOException e) {
            System.out.println("An error occurred while exporting the report.");
            e.printStackTrace();
        }
    }

    // Overridden toString() method to return a string representation of the staff details
    @Override
    public String toString() {
        return "Staff ID: " + staffID + "\n" +
               "Name: " + getName() + "\n" +
               "Age: " + getAge() + "\n" +
               "Date of Birth: " + getDateOfBirth().getDay() + "-" + getDateOfBirth().getMonth() + "-" + getDateOfBirth().getYear() + "\n" +
               "Email: " + getEmail() + "\n" +  // Displaying email from the Person class
               "Role: " + role + "\n" +
               "Department: " + department;
    }
}
